{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UsersService {\n  constructor(http) {\n    this.http = http;\n    this.urlGetUsers = 'http://localhost:8080';\n    this.urlUpdateUsers = 'http://localhost:8080';\n    console.log('Servicio usuarios');\n  }\n  getUsers() {\n    // Manejar la situación donde no se pudo obtener el companyId\n    return this.http.get(this.urlGetUsers);\n  }\n  updateUsers(user) {\n    // Realizar una solicitud PUT para actualizar usuarios\n    return this.http.put(this.urlUpdateUsers, user); // 'user' es el objeto con los datos de usuario a actualizar\n  }\n}\n_class = UsersService;\n_class.ɵfac = function UsersService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,YAAY;EAIvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHxB,gBAAW,GAAG,uBAAuB;IACrC,mBAAc,GAAG,uBAAuB;IAGtCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;EACjC;EAEDC,QAAQ;IAGN;IACA,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,IAAI,CAACC,WAAW,CAAC;EACxC;EAEAC,WAAW,CAACC,IAAS;IACnB;IACA,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,IAAI,CAACC,cAAc,EAAEF,IAAI,CAAC,CAAC,CAAC;EACnD;;SAlBWT,YAAY;;mBAAZA,MAAY;AAAA;;SAAZA,MAAY;EAAAY,SAAZZ,MAAY;EAAAa,YAFX;AAAM","names":["UsersService","constructor","http","console","log","getUsers","get","urlGetUsers","updateUsers","user","put","urlUpdateUsers","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dell\\Documents\\Documentos\\Proyectos\\ExamenBlumonPay\\Angular\\BlummonAngular\\BlummonAngular\\src\\app\\services\\users.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  urlGetUsers = 'http://localhost:8080';\n  urlUpdateUsers = 'http://localhost:8080'\n  router: any;\n  constructor(private http: HttpClient) {\n    console.log('Servicio usuarios');\n   }\n\n  getUsers() {\n  \n\n    // Manejar la situación donde no se pudo obtener el companyId\n    return this.http.get(this.urlGetUsers);\n  }\n\n  updateUsers(user: any) {\n    // Realizar una solicitud PUT para actualizar usuarios\n    return this.http.put(this.urlUpdateUsers, user); // 'user' es el objeto con los datos de usuario a actualizar\n  }\n  \n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}