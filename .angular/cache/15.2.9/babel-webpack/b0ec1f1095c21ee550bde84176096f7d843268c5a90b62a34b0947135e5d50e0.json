{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UsersService {\n  constructor(http) {\n    this.http = http;\n    this.urlGetUsers = 'http://localhost:8080/v1/users';\n    this.urlUpdateUsers = 'http://localhost:8080/v1/users';\n    this.urlLoginUser = 'http://localhost:8080/v1/users/login';\n    console.log('Servicio usuarios');\n  }\n  getUsers() {\n    // Manejar la situación donde no se pudo obtener el companyId\n    return this.http.get(this.urlGetUsers);\n  }\n  updateUsers(user, userId) {\n    // Realizar una solicitud PUT para actualizar usuarios\n    const urlWithUserId = `${this.urlUpdateUsers}/${userId}`;\n    return this.http.put(urlWithUserId, user); // 'user' es el objeto con los datos de usuario a actualizar\n  }\n\n  deleteUsers(userId) {\n    // Realizar una solicitud PUT para actualizar usuarios\n    const urlWithUserId = `${this.urlUpdateUsers}/${userId}`;\n    return this.http.delete(urlWithUserId); // 'user' es el objeto con los datos de usuario a actualizar\n  }\n\n  createUsers(user) {\n    // Realizar una solicitud PUT para actualizar usuarios\n    const urlWithUserId = `${this.urlUpdateUsers}`;\n    return this.http.post(urlWithUserId, user); // 'user' es el objeto con los datos de usuario a actualizar\n  }\n\n  findUsers(user) {\n    // Realizar una solicitud PUT para actualizar usuarios\n    const urlWithUserId = `${this.urlLoginUser}`;\n    return this.http.post(urlWithUserId, user); // 'user' es el objeto con los datos de usuario a actualizar\n  }\n}\n_class = UsersService;\n_class.ɵfac = function UsersService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,YAAY;EAKvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJxB,gBAAW,GAAG,gCAAgC;IAC9C,mBAAc,GAAG,gCAAgC;IACjD,iBAAY,GAAG,sCAAsC;IAGnDC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;EACjC;EAEDC,QAAQ;IAGN;IACA,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,IAAI,CAACC,WAAW,CAAC;EACxC;EAEAC,WAAW,CAACC,IAAS,EAACC,MAAc;IAClC;IACA,MAAMC,aAAa,GAAG,GAAG,IAAI,CAACC,cAAc,IAAIF,MAAM,EAAE;IACxD,OAAO,IAAI,CAACR,IAAI,CAACW,GAAG,CAACF,aAAa,EAAEF,IAAI,CAAC,CAAC,CAAC;EAC7C;;EAEAK,WAAW,CAACJ,MAAc;IACxB;IACA,MAAMC,aAAa,GAAG,GAAG,IAAI,CAACC,cAAc,IAAIF,MAAM,EAAE;IACxD,OAAO,IAAI,CAACR,IAAI,CAACa,MAAM,CAACJ,aAAa,CAAC,CAAC,CAAC;EAC1C;;EAEAK,WAAW,CAACP,IAAS;IACnB;IACA,MAAME,aAAa,GAAG,GAAG,IAAI,CAACC,cAAc,EAAE;IAC9C,OAAO,IAAI,CAACV,IAAI,CAACe,IAAI,CAACN,aAAa,EAAEF,IAAI,CAAC,CAAC,CAAC;EAC9C;;EAEAS,SAAS,CAACT,IAAS;IACjB;IACA,MAAME,aAAa,GAAG,GAAG,IAAI,CAACQ,YAAY,EAAE;IAC5C,OAAO,IAAI,CAACjB,IAAI,CAACe,IAAI,CAACN,aAAa,EAAEF,IAAI,CAAC,CAAC,CAAC;EAC9C;;SAtCWT,YAAY;;mBAAZA,MAAY;AAAA;;SAAZA,MAAY;EAAAoB,SAAZpB,MAAY;EAAAqB,YAFX;AAAM","names":["UsersService","constructor","http","console","log","getUsers","get","urlGetUsers","updateUsers","user","userId","urlWithUserId","urlUpdateUsers","put","deleteUsers","delete","createUsers","post","findUsers","urlLoginUser","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dell\\Documents\\Documentos\\Proyectos\\ExamenBlumonPay\\Angular\\BlummonAngular\\BlummonAngular\\src\\app\\services\\users.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  urlGetUsers = 'http://localhost:8080/v1/users';\n  urlUpdateUsers = 'http://localhost:8080/v1/users'\n  urlLoginUser = 'http://localhost:8080/v1/users/login'\n  router: any;\n  constructor(private http: HttpClient) {\n    console.log('Servicio usuarios');\n   }\n\n  getUsers() {\n  \n\n    // Manejar la situación donde no se pudo obtener el companyId\n    return this.http.get(this.urlGetUsers);\n  }\n\n  updateUsers(user: any,userId: number) {\n    // Realizar una solicitud PUT para actualizar usuarios\n    const urlWithUserId = `${this.urlUpdateUsers}/${userId}`;\n    return this.http.put(urlWithUserId, user); // 'user' es el objeto con los datos de usuario a actualizar\n  }\n\n  deleteUsers(userId: number) {\n    // Realizar una solicitud PUT para actualizar usuarios\n    const urlWithUserId = `${this.urlUpdateUsers}/${userId}`;\n    return this.http.delete(urlWithUserId); // 'user' es el objeto con los datos de usuario a actualizar\n  }\n\n  createUsers(user: any) {\n    // Realizar una solicitud PUT para actualizar usuarios\n    const urlWithUserId = `${this.urlUpdateUsers}`;\n    return this.http.post(urlWithUserId, user); // 'user' es el objeto con los datos de usuario a actualizar\n  }\n\n  findUsers(user: any) {\n    // Realizar una solicitud PUT para actualizar usuarios\n    const urlWithUserId = `${this.urlLoginUser}`;\n    return this.http.post(urlWithUserId, user); // 'user' es el objeto con los datos de usuario a actualizar\n  }\n  \n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}